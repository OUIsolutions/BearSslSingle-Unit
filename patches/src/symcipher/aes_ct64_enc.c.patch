25c25
< #include "inner.h"
---
> 
28c28
< add_round_key(uint64_t *q, const uint64_t *sk)
---
> BEAR_SINGLE_UNITY_FILEadd_round_key(uint64_t *q, const uint64_t *sk)
41c41
< shift_rows(uint64_t *q)
---
> BEAR_SINGLE_UNITY_FILEshift_rows(uint64_t *q)
60c60
< rotr32(uint64_t x)
---
> BEAR_SINGLE_UNITY_FILErotr32(uint64_t x)
66c66
< mix_columns(uint64_t *q)
---
> BEAR_SINGLE_UNITY_FILEmix_columns(uint64_t *q)
88,95c88,95
< 	q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
< 	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
< 	q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
< 	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
< 	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
< 	q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
< 	q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
< 	q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
---
> 	q[0] = q7 ^ r7 ^ r0 ^ BEAR_SINGLE_UNITY_FILErotr32(q0 ^ r0);
> 	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ BEAR_SINGLE_UNITY_FILErotr32(q1 ^ r1);
> 	q[2] = q1 ^ r1 ^ r2 ^ BEAR_SINGLE_UNITY_FILErotr32(q2 ^ r2);
> 	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ BEAR_SINGLE_UNITY_FILErotr32(q3 ^ r3);
> 	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ BEAR_SINGLE_UNITY_FILErotr32(q4 ^ r4);
> 	q[5] = q4 ^ r4 ^ r5 ^ BEAR_SINGLE_UNITY_FILErotr32(q5 ^ r5);
> 	q[6] = q5 ^ r5 ^ r6 ^ BEAR_SINGLE_UNITY_FILErotr32(q6 ^ r6);
> 	q[7] = q6 ^ r6 ^ r7 ^ BEAR_SINGLE_UNITY_FILErotr32(q7 ^ r7);
105c105
< 	add_round_key(q, skey);
---
> 	BEAR_SINGLE_UNITY_FILEadd_round_key(q, skey);
108,110c108,110
< 		shift_rows(q);
< 		mix_columns(q);
< 		add_round_key(q, skey + (u << 3));
---
> 		BEAR_SINGLE_UNITY_FILEshift_rows(q);
> 		BEAR_SINGLE_UNITY_FILEmix_columns(q);
> 		BEAR_SINGLE_UNITY_FILEadd_round_key(q, skey + (u << 3));
113,114c113,114
< 	shift_rows(q);
< 	add_round_key(q, skey + (num_rounds << 3));
---
> 	BEAR_SINGLE_UNITY_FILEshift_rows(q);
> 	BEAR_SINGLE_UNITY_FILEadd_round_key(q, skey + (num_rounds << 3));
